@function sqrt($r) {
	$x0: 1;
	$x1: $x0;

	@for $i from 1 through 10 {
		$x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
		$x0: $x1;
	}

	@return $x1;
}

@function pow($x, $n) {
	$ret: 1;

	@if $n >= 0 {
		@for $i from 1 through $n {
			$ret: $ret * $x;
		}
	}
	@else {
		@for $i from $n to 0 {
			$ret: $ret / $x;
		}
	}

	@return $ret;
}

@function to-fixed($float, $digits: 2) {
	$pow: pow(10, $digits);

	@return round($float * $pow) / $pow;
}

@mixin psuedo($psuedo: before) {
	&:#{$psuedo} {
		content: '';
		display: block;
		position: absolute;
		left: 0;

		@content;
	}
}

@mixin rectangle($width, $height, $color) {
	width: $width;
	height: $height;
	background: $color;
}

@mixin square($size, $color) {
	@include rectangle($size, $size, $color);
}

@mixin circle($size, $color) {
	@include square($size, $color);
	border-radius: 50%;
}

@mixin triangle($size, $color) {
	$half: $size / 2;
	$height: to-fixed(sqrt(3) / 2 * $size, 1);

	background-color: transparent;
	border-style: solid;
	border-width: 0 $half $height;
	border-color: transparent transparent $color transparent;
	height: 0;
	width: 0;
}

@mixin pentagon($width, $color) {
  $side: ($width / sin(108deg)) * sin(36deg);
  $top_height: sin(36deg) * $side;
  $bottom_height: sin(72deg) * $side;
  $side_border_width: ($width - $side) / 2;
  
  width: #{$side}px;
  border-width: #{$bottom_height}px #{$side_border_width}px 0;
  border-style: solid;
  border-color: $color transparent;
  height: 0;
  
  &::before {
    content: "";
    border-style: solid;
    border-width: 0 #{$width/2}px #{$top_height}px;
    position: absolute;
    height: 0;
    width: 0;
    top: #{ceil(-$bottom_height) - floor($top_height)}px;
    left: -#{$side_border_width}px;
    border-color: transparent transparent $color; 
  }
}
